postgresql:
 fullnameOverride: postgres
   
 auth:
    username: abdullah
    password: edhi
    postgresPassword: edhi
    database: mydb_1

 primary:
   persistence:
    enabled: true
    storageClass: ""
    size: 10Gi

   podSecurityContext:
    enabled: true
    fsGroup: 1001

   containerSecurityContext:
    enabled: true
    runAsUser: 1001

   service:
    type: ClusterIP

 volumePermissions:
  enabled: true

 metrics:
  readinessProbe:
   enabled: true
   customCommand:
    command:
      - /bin/sh
      - -c
      - pg_isready -U abdullah -d mydb_1

  livenessProbe:
   enabled: true
   customCommand:
    command:
      - /bin/sh
      - -c
      - pg_isready -U abdullah -d mydb_1
      
elasticsearch:
  name: elasticsearch
  namespace: default
  image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
  replicas: 1
  service:
    type: ClusterIP
    ports:
      http: 9200
      transport: 9300
  resources:
    limits:
      memory: "2Gi"
      cpu: "1000m"
    requests:
      memory: "1Gi"
      cpu: "500m"
  config:
    clusterName: "Demo-Elastic"
    discoveryType: "single-node"
    networkHost: "0.0.0.0"
    xpackSecurityEnabled: true
    xpackHttpSSLEnabled: false
    xpackTransportSSLEnabled: false
  storage:
    emptyDir: true

fluentd:
  image: fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch
  logPath: /fluentd/log/app.log
  posFile: /fluentd/log/app.pos
  logPvc: shared-logs-pvc

  elasticsearch:
    host: elasticsearch-service
    port: 9200
    scheme: https
    user: abdullah
    password: edhi12
    sslVerify: false



# Updated values.yaml section for otelCollector
otelCollector:
  replicaCount: 1
  name: otel-collector
  image:
    repository: otel/opentelemetry-collector-contrib
    tag: 0.101.0
    pullPolicy: IfNotPresent

  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
            cors:
              allowed_origins:
                - "http://localhost:5173"
                - "http://backend.127.0.0.1.sslip.io"
                - "http://frontend.127.0.0.1.sslip.io"
                - "http://grafana.127.0.0.1.sslip.io"
              allowed_headers:
                - "Content-Type"
                - "traceparent"
                - "tracestate"
                - "baggage"
                - "x-client-trace-id"

      hostmetrics:
        collection_interval: 10s
        scrapers:
          cpu: {}
          memory: {}
          disk: {}
          filesystem: {}
          network: {}
          load: {}

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048

    exporters:
      otlp:
        endpoint: "jaeger-service-collector:4317"
        tls:
          insecure: true
      logging:
        loglevel: info
      prometheus:
        endpoint: "0.0.0.0:9464"
        namespace: "otelcol"
        const_labels:
          service: "otel-collector"
        resource_to_telemetry_conversion:
          enabled: true

    service:
      # Remove duplicate telemetry configuration
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp, logging]

        metrics:
          receivers: [otlp, hostmetrics]
          processors: [batch]
          exporters: [prometheus]